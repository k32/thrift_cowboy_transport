#+TITLE: Cowboy transport for Thrift

This library provides a convenient, schema-based RPC between
JavaScript (browser & node.js) and your Erlang server.

* Example

1) Define protocol schema using [[http://thrift.apache.org][Apache Thrift]] IDL:

#+BEGIN_SRC thrift
// Define data structures
struct Vec2
{
  1: double x,
  2: double y,
}

// Define services
service TestServ {
  void ping(),
  double test_v2(1:Vec2 v),
}
#+END_SRC

2) Add API to the cowboy router:

#+BEGIN_SRC erlang
-module(main).

start(_StartType, _StartArgs) ->
    Port = 9098,
    %% Choose serialization format (aka protocol)
    %% E.g. thrift_binary_protocol, thrift_compact_protocol, ...
    Protocol = thrift_binary_protocol,
    %% Service is an Erlang module generated from the IDL by Thrift compiler
    Service = test_serv_thrift,
    %% Define callback module for the API methods
    Handler = test_serv_handler,
    Dispatch = cowboy_router:compile(
                 [{'_', [{"/test_serv/", cowboy_thrift_handler, [%% Callback module for API calls:
                                                                 {service, Service},
                                                                 {protocol, Protocol},
                                                                 {handler, Handler}]}
                        ]}]),
    cowboy:start_http(my_http_listener, 100, [{port, Port}],
                      [{env, [{dispatch, Dispatch}]}]),
    cowboy_thrift_test_sup:start_link().
#+END_SRC

3) Implement the callback handler

#+BEGIN_SRC erlang
module(test_serv_handler).
%% Include record definitions generated by Thrift:
-include("../include/test_types.hrl").
-export([handle_error/2, handle_function/2]).

handle_error(A, B) ->
    error_logger:error_msg("~p:handle_error ~p ~p~n", 
                           [?MODULE, A, B]).

handle_function(ping, {}) ->
    io:format("~p:ping~n", [?MODULE, Str]),
    ok;
handle_function(test_v2, {Arg1 = #'Vec2'{x = X, y = Y}}) ->
    io:format("~p:test_v2, arg=~p~n", [?MODULE, Arg1]),
    {reply, X + Y};
handle_function(Function, Data) ->
    error_logger:warning_msg("~p:handle_function Unknown method ~p ~p~n",
                             [?MODULE, Function, Data]).
#+END_SRC

4) JavaScript client:
#+BEGIN_SRC javascript
var TestServ = require("../gen-nodejs/TestServ.js");
var TestTypes = require("../gen-nodejs/test_types.js");
var connection = Thrift.createHttpConnection("localhost", 9098, {
    path : "/test_serv/",
    protocol : Thrift.TBinaryProtocol
});
var client = Thrift.createClient(TestServ, connection);

// Connect to the server
connection.on("error", function(err) {
  console.log("Connection encountered an error", err);
});

// Call the server
client.test_v2(
  new TestTypes.Vec2({x: 2.0, y: 3.0}),
  function(res, val) {
    console.log("Result:", val)
  });
#+END_SRC
